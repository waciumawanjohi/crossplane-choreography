apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: example
  labels:
    # An optional convention is to include a label of the XRD. This allows
    # easy discovery of compatible Compositions.
    crossplane.io/xrd: xworkloads.carto.run
    # The following label can
    # be used in 'compositionSelector' in an XR or Claim.
    app.tanzu.vmware.com/workload-type: web
    app.tanzu.vmware.com/starting-point: image
spec:

  # Each Composition must declare that it is compatible with a particular type
  # of Composite Resource using its 'compositeTypeRef' field. The referenced
  # version must be marked 'referenceable' in the XRD that defines the XR.
  compositeTypeRef:
    apiVersion: carto.run/v1alpha1
    kind: XWorkload

  # When an XR is created in response to a claim Crossplane needs to know where
  # it should create the XR's connection secret. This is configured using the
  # 'writeConnectionSecretsToNamespace' field.
#  writeConnectionSecretsToNamespace: crossplane-system

  # Each Composition must specify at least one composed resource template. In
  # this case the Composition tells Crossplane that it should create, update, or
  # delete a CloudSQLInstance whenever someone creates, updates, or deletes an
  # XPostgresSQLInstance.
  resources:

    # It's good practice to provide a unique name for each entry. Note that
    # this identifies the resources entry within the Composition - it's not
    # the name the CloudSQLInstance. The 'name' field will be required in a
    # future version of this API.
    - name: image-provider
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: source.apps.tanzu.vmware.com/v1alpha1
              kind: ImageRepository
              metadata:
                labels:
                  app.kubernetes.io/component: image
              spec:
                image: docker.io/nginxdemos/hello:latest
                interval: 1m0s
                serviceAccountName: default
          providerConfigRef:
            name: kubernetes-provider
      patches:
        - type: FromCompositeFieldPath
          toFieldPath: spec.forProvider.manifest.metadata.name
          fromFieldPath: spec.claimRef.name
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          fromFieldPath: spec.claimRef.namespace
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          toFieldPath: spec.forProvider.manifest.metadata.labels
          fromFieldPath: metadata.labels
          policy:
            mergeOptions:
              appendSlice: true
        - type: FromCompositeFieldPath
          toFieldPath: spec.forProvider.manifest.spec.image
          fromFieldPath: spec.source.image
          policy:
            fromFieldPath: Required
         # TODO: create a field in the workload for image pull permissions.
         #       not needed now because we're referring to a public image
#        - type: FromCompositeFieldPath
#          toFieldPath: spec.forProvider.manifest.spec.serviceAccountName
#          fromFieldPath: spec.SOME_FIELD_STILL_NEEDED
#          policy:
#            fromFieldPath: Required

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.manifest.status.artifact.revision
          toFieldPath: status.resources[0].name
          policy:
            fromFieldPath: Required
#    - name: config-provider
#      base:
#        apiVersion: kubernetes.crossplane.io/v1alpha1
#        kind: Object
#        spec:
#          providerConfigRef:
#            name: kubernetes-provider
#          forProvider:
#            manifest:
#              apiVersion: conventions.apps.tanzu.vmware.com/v1alpha1
#              kind: PodIntent
#              metadata:
#                labels:
#                  app.kubernetes.io/component: intent
#              spec:
#                serviceAccountName: default
#                template:
#                  metadata:
#                    annotations:
#                      developer.conventions/target-containers: workload
#                    labels:
#                      app.kubernetes.io/component: run
#                  spec:
#                    serviceAccountName: default
#                    containers:
#                      - name: workload
#                        image: #@ data.values.image
#                        securityContext:
#                          runAsUser: 1000
#                        #@ if hasattr(data.values.workload.spec, "env"):
#                        env:
#                          #@ for var in data.values.workload.spec.env:
#                          - name: #@ var.name
#                            #@ if/end hasattr(var, "value"):
#                            value: #@ var.value
#                            #@ if/end hasattr(var, "valueFrom"):
#                            valueFrom: #@ var.valueFrom
#                          #@ end
#                        #@ end
#                        #@ if/end hasattr(data.values.workload.spec, "resources"):
#                        resources: #@ data.values.workload.spec["resources"]
#      patches:
#        - type: FromCompositeFieldPath
#          toFieldPath: spec.forProvider.manifest.metadata.name
#          fromFieldPath: spec.claimRef.name
#          policy:
#            fromFieldPath: Required
#        - type: FromCompositeFieldPath
#          toFieldPath: spec.forProvider.manifest.metadata.labels
#          fromFieldPath: metadata.labels
#          policy:
#            mergeOptions:
#              appendSlice: true
#        - type: FromCompositeFieldPath
#          toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.carto.run/workload-name
#          fromFieldPath: spec.claimRef.name
#          policy:
#            fromFieldPath: Required
## TODO create field on workload for debug and live-update param
##        - type: FromCompositeFieldPath
##          toFieldPath: spec.forProvider.manifest.spec.template.metadata.annotations.apps.tanzu.vmware.com/debug
##          fromFieldPath: param("debug")
##        - type: FromCompositeFieldPath
##          toFieldPath: spec.forProvider.manifest.spec.template.metadata.annotations.apps.tanzu.vmware.com/live-update
##          fromFieldPath: param("live-update")
## TODO create field on workload for annotations
#        - type: FromCompositeFieldPath
#          toFieldPath: spec.forProvider.manifest.spec.template.metadata.annotations
#          fromFieldPath: param("annotations")
